require('dotenv').config();
const {Bot, GrammyError, HttpError, Keyboard, InlineKeyboard} = require('grammy');

const {hydrate} = require('@grammyjs/hydrate');

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

// bot.command('start', async (ctx) => {
//     await ctx.reply('–ü—Ä–∏–≤–µ—Ç, —è - –±–æ—Ç', {
//         reply_parameters: {message_id: ctx.msg.message_id}
//     })
// })

bot.command('start', async (ctx) => {
    await ctx.react('üëÄ')
    await ctx.reply('–ü—Ä–∏–≤–µ—Ç, —è \\- –±–æ—Ç\\. –ù–µ —Å–º–æ—Ç—Ä–∏: ||–Ω—É –µ–º–∞–µ||', {
        parse_mode: 'MarkdownV2'
    })
})

let evaPaidLessons = 4;
let giorgiPaidLessons = 3;
let irakliPaidLessons = 1;

// if(evaPaidLessons <=4){
//     bot.api.sendMessage(962297208, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å');
// }
const menuKeyboard = new InlineKeyboard().text('–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤', 'studentsList').row().text('–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å(–¥–ª—è —É—á–∏—Ç–µ–ª–µ–π)', 'visitOrNot').row().text('–î–æ–±–∞–≤–∏—Ç—å —É—Ä–æ–∫–∏', 'addLessons')
const studenPaidLessonsKeyboard = new InlineKeyboard().text('–≠–≤–∞', 'evaInfo').text('–ò—Ä–∞–∫–ª–∏', 'irakliInfo').text('–ì–∏–æ—Ä–≥–∏', 'giorgiInfo')
const studentsAttendanceKeyboard = new InlineKeyboard().text('–≠–≤–∞', 'evaPaidLessons').text('–ò—Ä–∞–∫–ª–∏', 'irakliPaidLessons').text('–ì–∏–æ—Ä–≥–∏', 'giorgiPaidLessons')
const daNetKeyboard = new InlineKeyboard().text('‚úÖ', '+').text('‚ùå', '-').text('–ù–∞–∑–∞–¥', 'back')
const addLessonsKeyboard = new InlineKeyboard().text('–≠–≤–∞', 'evaAdd').text('–ò—Ä–∞–∫–ª–∏', 'irakliAdd').text('–ì–∏–æ—Ä–≥–∏', 'giorgiAdd')

bot.command('menu', async (ctx) => {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', {
        reply_markup: menuKeyboard,
    })

})

bot.callbackQuery('studentsList', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.callbackQuery.message.editText('–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤', {
        reply_markup: studenPaidLessonsKeyboard
    })
    
})

bot.callbackQuery('evaInfo', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply(`–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —É—Ä–æ–∫–æ–≤ : ${evaPaidLessons}`)
})

bot.callbackQuery('giorgiInfo', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply(`Giorgi's paid lessons: ${giorgiPaidLessons}`)
})

bot.callbackQuery('irakliInfo', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply(`Irakli's paid lessons: ${irakliPaidLessons}`)
})


bot.callbackQuery('visitOrNot', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.callbackQuery.message.editText('–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤', {
        reply_markup: studentsAttendanceKeyboard
    })
    
})

bot.callbackQuery('evaPaidLessons', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.callbackQuery.message.editText('–£—Ä–æ–∫ —Å–æ—Å—Ç–æ—è–ª—Å—è?', {
        reply_markup: daNetKeyboard
    })
})

bot.callbackQuery('+', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply(`Eva's paid lessons: ${evaPaidLessons-1}`, {
        parse_mode: 'MarkdownV2'
    })
})

bot.callbackQuery('-', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply(`Eva's paid lessons: ${evaPaidLessons}`, {
        parse_mode: 'MarkdownV2'
    })
})

bot.callbackQuery('back', async (ctx) => {
    await ctx.answerCallbackQuery();
    await ctx.callbackQuery.message.editText('–°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', {
        reply_markup: studentsAttendanceKeyboard,
    })
})

bot.callbackQuery('addLessons', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.reply('–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤', {
        reply_markup: addLessonsKeyboard
    })
})

bot.callbackQuery('evaAdd', async (ctx) => {
    await ctx.answerCallbackQuery()
    await ctx.callbackQuery.message.editText('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å: ')
})


bot.command('mood', async (ctx) => {
    // const moodKeyboard = new Keyboard().text('–û—Ç–ª–∏—á–Ω–æ').row().text('–ù–æ—Ä–º').row().text('bad').resized()  //–º–æ–∂–Ω–æ .oneTime()

    const moodLabels = ['–û—Ç–ª–∏—á–Ω–æ', '–ù–æ—Ä–º', 'bad']
    const rows = moodLabels.map((label) => {
        return[
            Keyboard.text(label)
        ]
    })
    const moodKeyboard2 = Keyboard.from(rows).resized().oneTime( )
    await ctx.reply('How is your mood today', {
        reply_markup: moodKeyboard2
    })
})

bot.hears('bad', async (ctx) => {
    await ctx.reply('–æ—á–µ–Ω—å –∂–∞–ª—å', {
        reply_markup: {remove_keyboard: true}
    })
})

bot.command('inline_keyboard', async (ctx) => {
    // const inlineKeyboard = new InlineKeyboard().text('1', 'button-1').row().text('2', 'button-2').row().text('3', 'button-3')
    const inlineKeyboard2 = new InlineKeyboard().url('–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ', 'https://www.youtube.com/watch?v=q-AFR0D7Vuw')
    await ctx.reply('Please choose a button', {
        reply_markup: inlineKeyboard2
    })
})

// bot.callbackQuery(['button-1', 'button-2', 'button-3'], async (ctx) => {   //  /button-[1-3]
//     await ctx.answerCallbackQuery('you choose button 1-2-3')
//     await ctx.reply('you choose button 1-2-3')
// })

// bot.on('callback_query:data', async (ctx) => {
//     await ctx.answerCallbackQuery()
//     await ctx.reply(`You choose: ${ctx.callbackQuery.data}`)
// })

bot.command('share', async (ctx) => {
    const shareKeyboard = new Keyboard().requestContact('–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç').requestLocation('–õ–æ–∫–∞—Ü–∏—è')
    .placeholder('Please share your data').resized()
        await ctx.reply('–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –¥–∞–Ω–Ω—ã–º–∏', {
            reply_markup: shareKeyboard
        })
})

bot.on(':contact', async (ctx) => {
    await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç', {
        reply_markup: {remove_keyboard: true}
    })
})
// bot.on('msg').filter((ctx) => {
//     return ctx.from.id === 1398354352                // —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞(–º–µ–¥–∏–∞ –∏ —Ç.–¥.)
// }, async (ctx) => {
//     await ctx.reply('—ç—Ç–æ —è')
// })

// bot.on('message:voice', async (ctx) => {
//     await ctx.reply('—è –ø–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
// })

// bot.on(':photo').on('::hashtag', async (ctx) => {
//     await ctx.reply('media+hashtag')
// })

// bot.on('message:photo', async (ctx) => {
//     await ctx.reply('—è –ø–æ–ª—É—á–∏–ª –∫–∞—Ä—Ç–∏–Ω–∫—É')
// })

// bot.on('message:entities:url', async (ctx) => {                 //bot.on('::url') - —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ    bot.on([':media', '::url']) - —ç—Ç–æ –∫–∞–∫ –ò–õ–ò
//     await ctx.reply('—è –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É')
// })

// bot.on('message', async (ctx) => {
//     await ctx.reply('–ù–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å...')
// })


// bot.hears('ID', async (ctx) => {
//     await ctx.reply(`Your id: ${ctx.from.id}`);                     //–∫–∞–∫ —É–∑–Ω–∞—Ç—å —Å–≤–æ–π –∞–π–¥–∏
// })








bot.api.setMyCommands([
    {
        command: 'start',
        description: '–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞',
    },
    {
        command: 'hello',
        description: '–ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
    },
    {
        command: 'cat',
        description: '–ø–æ–ø—Ä–æ–±—É–π',
    },
    {
        command : 'getvideo',
        description: '–ø–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –í–æ–ª–∫–∞',
    },
    {
        command : 'share',
        description: '–ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –¥–∞–Ω–Ω—ã–º–∏',
    },
    {
        command : 'mood',
        description: '–Ω–∞–∂–º–∏ bad',
    },
    {
        command : 'inline_keyboard',
        description: '–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞',
    },
    {
        command: 'menu',
        description: '–ü–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é',
    },
])

bot.command(['say_Hello', 'hello', 'hi'], async (ctx) => {
    await ctx.reply('*He*_llo_\\!', {
        parse_mode: 'MarkdownV2'
    })
})

bot.command('getvideo', async (ctx) => {
    await ctx.reply('–°–≤–µ–∂–µ–µ –≤–∏–¥–µ–æ –í–æ–ª–∫–∞: [link](https://www.youtube.com/watch?v=nTTY0J_k6A0)', {
        parse_mode: 'MarkdownV2',
        disable_web_page_preview: false
    })
})

bot.command('cat', async (ctx) => {
    await ctx.reply('—Ç—ã –º–æ–π *—à—à—à—à—à—à–ª–∞–¥–∫–∏–π* –∫–æ—Ç', {
        parse_mode: 'MarkdownV2'
    })
})


bot.hears('ping', async (ctx) => {              //–ø—Ä–æ–±–µ–ª—ã –Ω–µ –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è, —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –º–∞—Å—Å–∏–≤ —Å–ª–æ–≤ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
    await ctx.reply('—è –∑–¥–µ—Å—å')
})

bot.hears(/–ø–æ–ø–∞/, async (ctx) => {              //–µ—Å–ª–∏ —Ç–∞–∫–æ–µ —Å–ª–æ–≤–æ –µ—Å—Ç—å - –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–µ—Ç
    await ctx.reply('–¥–∞–∞–∞–∞–∞–∞')
})

function calculatePaidLessons(string) {
    if(string === "+"){
        evaPaidLessons = evaPaidLessons-1;
    }
}



bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while handling update ${ctx.update.update_id}:`);
    const e = err.error;

    if(e instanceof GrammyError) {
        console.error("Error in request:", e.description);
    }
    else if( e instanceof HttpError) {
        console.error("Could not contact Telegram:", e);
    }
    else{
        console.error("Unknown error:", e);
    }
})

bot.start();